# env.py
# Alembic autogenerated environment file for managing migrations.
#
# Author:   Benjamin Bengfort <benjamin@bengfort.com>
# Created:  Sun Jul 05 16:03:31 2015 -0400
#
# Copyright (C) 2015 Bengfort.com
# For license information, see LICENSE
#
# ID: env.py [] benjamin@bengfort.com $

"""
Alembic autogenerated environment file for managing migrations.
"""

##########################################################################
## Imports
##########################################################################

from __future__ import with_statement
from logging.config import fileConfig

from alembic import context
from sqlalchemy import engine_from_config, pool

from inigo.config import settings
from inigo.models import Base

##########################################################################
## Module Configuration.
##########################################################################

# This is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Override .ini settings with the inigo configuration
config.set_main_option('sqlalchemy.url', settings.database.url)

# Interpret the config file for Python logging.
fileConfig(config.config_file_name)

# Add Inigo model metadata object here
target_metadata = Base.metadata

##########################################################################
## Helper functions
##########################################################################

def run_migrations_offline():
    """
    Run migrations in 'offline' mode.

    This configures the context with just a URL and not an Engine, though an
    Engine is acceptable here as well.  By skipping the Engine creation we
    don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the script output.
    """

    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url, target_metadata=target_metadata, literal_binds=True
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online():
    """
    Run migrations in 'online' mode.

    In this scenario we need to create an Engine and associate a connection
    with the context.
    """

    connectable = engine_from_config(
        config.get_section(config.config_ini_section),
        prefix='sqlalchemy.',
        poolclass=pool.NullPool
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata
        )

        with context.begin_transaction():
            context.run_migrations()

##########################################################################
## Execute the context
##########################################################################

if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
